Certifying authority (CA)
	- CERTIFY_AUTH_TOKEN : The CA needs to have this token, if it is a ceritfying authoring.
	- A token mapping is created which stores id (handle) and corresponding key. This mapping is again an array of token structure.
	- The key is generated by CA, which uses a simple random no. generator mechanism.

LOGIN_CA :
	- This IOCTL call is used by CA to login, it can only login if it has CERTIFY_AUTH_TOKEN.
	- This login is independent of the chatroom.

* For any process to login 
	- It must have the correct key given/generated by CA for the handle.
	- Unique handle

* Both of the above are checked using the token mapping stored, if the mapping doesnt have an entry of a handle then the key has not been generated. Also if the mapping is there but the key doesnt matches then the key is invalid.

IOCTL_SETPAIR:
	- This IOCTL call is used by CA to update the token mappings in the char device. So that the handle - key pairs are available with both of them and individual checks can be performed easily.

Future things : Even a revalidate key method could be created, which would re-generate the key after process logouts or after some time(may be). So that the process gets a new key after some time again.

Instructions :

$ make
$ sudo insmod msyschar.ko
# If file already exists, then remove and again insmod the module
$ sudo rmmod msyschar.ko

$ dmesg|tail

# run the last command
# Example : replace 247 with the correct major number.
$ sudo mknod /dev/demo1 c 247 0

# if the major no. isn't 247, then please change the major number in file "syschar.h" on line 4.

$ gcc -o ioctl ioctl.c

$ gcc certifyauth.c

# run certifying process by:

$ sudo ./a.out

# run processes for chatting by:

$ sudo ./ioctl
